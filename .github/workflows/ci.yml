name: 'CI'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    name: 'Test Frontend (Next.js)'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript check
        run: pnpm tsc --noEmit

      - name: Run Next.js lint
        run: pnpm lint

      - name: Build Next.js frontend
        run: pnpm build

      - name: Test API routes
        run: |
          # Start Next.js in background and test API
          pnpm start &
          sleep 10
          # Test the API endpoint
          curl -f http://localhost:3000/api/cases?caseId=1 || exit 1
          # Kill the background process
          pkill -f "next start"

  test-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
          - platform: 'ubuntu-latest'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    name: 'Test Tauri (${{ matrix.platform }})'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend for Tauri
        run: pnpm build

      - name: Check Rust formatting
        run: cargo fmt --manifest-path ./src-tauri/Cargo.toml -- --check

      - name: Run Rust clippy
        run: cargo clippy --manifest-path ./src-tauri/Cargo.toml -- -D warnings

      - name: Run Rust tests
        run: cargo test --manifest-path ./src-tauri/Cargo.toml

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          # Don't upload to release, just build
          includeRelease: false
          includeDebug: false

  integration-test:
    runs-on: ubuntu-latest
    name: 'Integration Test'
    needs: [test-frontend, test-tauri]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and test complete app
        run: |
          # Build frontend
          pnpm build
          
          # Test that Tauri can compile with the built frontend
          cd src-tauri
          cargo build --release
          
          echo "âœ… Integration test passed - both frontend and Tauri compile successfully" 