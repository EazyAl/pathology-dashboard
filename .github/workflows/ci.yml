name: 'CI'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    name: 'Test Frontend (Next.js)'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript check
        run: pnpm tsc --noEmit

      - name: Build Next.js frontend
        run: pnpm build

  test-backend:
    runs-on: ubuntu-latest
    name: 'Test Backend (Next.js API)'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Next.js
        run: pnpm build

      - name: Test API routes
        run: |
          # Start Next.js in background
          pnpm start &
          NEXT_PID=$!
          sleep 15
          
          # Test basic API endpoint
          echo "Testing basic API endpoint..."
          response=$(curl -s -L -w "%{http_code}" http://localhost:3000/api/cases)
          status_code="${response: -3}"
          if [ "$status_code" != "200" ]; then
            echo "❌ Basic API test failed with status: $status_code"
            echo "Response: ${response%???}"
            kill $NEXT_PID 2>/dev/null || true
            exit 1
          fi
          echo "✅ Basic API test passed"
          
          # Test search functionality
          echo "Testing case search..."
          response=$(curl -s -L -w "%{http_code}" "http://localhost:3000/api/cases?caseId=1")
          status_code="${response: -3}"
          if [ "$status_code" != "200" ]; then
            echo "❌ Case search test failed with status: $status_code"
            echo "Response: ${response%???}"
            kill $NEXT_PID 2>/dev/null || true
            exit 1
          fi
          echo "✅ Case search test passed"
          
          # Test search with multiple results
          echo "Testing multiple results search..."
          response=$(curl -s -L -w "%{http_code}" "http://localhost:3000/api/cases?caseId=9")
          status_code="${response: -3}"
          if [ "$status_code" != "200" ]; then
            echo "❌ Multiple results test failed with status: $status_code"
            echo "Response: ${response%???}"
            kill $NEXT_PID 2>/dev/null || true
            exit 1
          fi
          echo "✅ Multiple results test passed"
          
          # Test non-existent case (should return 404)
          echo "Testing non-existent case..."
          response=$(curl -s -L -w "%{http_code}" "http://localhost:3000/api/cases?caseId=999")
          status_code="${response: -3}"
          if [ "$status_code" != "404" ]; then
            echo "❌ Non-existent case test failed - expected 404, got: $status_code"
            echo "Response: ${response%???}"
            kill $NEXT_PID 2>/dev/null || true
            exit 1
          fi
          echo "✅ Non-existent case test passed"
          
          # Test invalid input (should return 400)
          echo "Testing invalid input..."
          response=$(curl -s -L -w "%{http_code}" "http://localhost:3000/api/cases?caseId=abc")
          status_code="${response: -3}"
          if [ "$status_code" != "400" ]; then
            echo "❌ Invalid input test failed - expected 400, got: $status_code"
            echo "Response: ${response%???}"
            kill $NEXT_PID 2>/dev/null || true
            exit 1
          fi
          echo "✅ Invalid input test passed"
          
          # Kill the background process
          kill $NEXT_PID 2>/dev/null || true
          wait $NEXT_PID 2>/dev/null || true
          
          echo "✅ All API tests passed!"

  test-tauri-windows:
    runs-on: windows-latest
    name: 'Test Tauri (Windows)'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend for Tauri
        run: pnpm build

      - name: Check Rust formatting
        run: cargo fmt --manifest-path ./src-tauri/Cargo.toml -- --check

      - name: Run Rust clippy
        run: cargo clippy --manifest-path ./src-tauri/Cargo.toml -- -D warnings

      - name: Run Rust tests
        run: cargo test --manifest-path ./src-tauri/Cargo.toml

      - name: Build Tauri app for Windows
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Don't upload to release, just build
          includeRelease: false
          includeDebug: false

  test-e2e-selenium:
    runs-on: ubuntu-latest
    name: 'E2E Tests (Selenium Web)'
    needs: [test-frontend, test-backend]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build

      - name: Start Next.js server
        run: |
          pnpm start &
          sleep 15

      - name: Install Chrome
        uses: nanasess/setup-chromedriver@v2

      - name: Run E2E tests
        run: pnpm test:e2e

  integration-test:
    runs-on: windows-latest
    name: 'Integration Test (Windows)'
    needs: [test-frontend, test-backend, test-tauri-windows, test-e2e-selenium]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Full integration test
        run: |
          # Build frontend
          echo "Building frontend..."
          pnpm build
          
          # Test that Tauri can compile with the built frontend
          echo "Testing Tauri compilation..."
          cd src-tauri
          cargo build --release
          cd ..
          
          # Start Next.js and test API in background
          echo "Testing frontend-backend integration..."
          pnpm start &
          Start-Sleep -Seconds 10
          
          # Test API integration
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:3000/api/cases?caseId=1" -UseBasicParsing
            if ($response.StatusCode -eq 200) {
              Write-Host "✅ API integration test passed"
            } else {
              Write-Host "❌ API integration test failed"
              exit 1
            }
          } catch {
            Write-Host "❌ API integration test failed: $_"
            exit 1
          } finally {
            # Kill the background process
            Stop-Process -Name "node" -Force -ErrorAction SilentlyContinue
          }
          
          echo "✅ Full integration test passed - Tauri + Next.js + API working on Windows" 