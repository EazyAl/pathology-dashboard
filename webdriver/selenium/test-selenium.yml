name: 'Selenium E2E Tests'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-e2e-selenium:
    runs-on: ubuntu-latest
    name: 'E2E Tests (Selenium Web)'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          cd webdriver/selenium && pnpm install

      - name: Build frontend
        run: pnpm build

      - name: Start Next.js server
        run: |
          pnpm start &
          sleep 15

      - name: Install Chrome and ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          export PATH=$PATH:/usr/lib/chromium-browser

      - name: Run Selenium Web Tests
        run: |
          cd webdriver/selenium
          
          # Create web-specific test file
          cat > test/web-interface.test.js << 'EOF'
          const { Builder, By, until } = require('selenium-webdriver');
          const { expect } = require('chai');
          const chrome = require('selenium-webdriver/chrome');

          describe('Rainpath Web Interface', () => {
            let driver;

            before(async function() {
              this.timeout(30000);
              
              const options = new chrome.Options();
              options.addArguments('--headless');
              options.addArguments('--no-sandbox');
              options.addArguments('--disable-dev-shm-usage');
              
              driver = await new Builder()
                .forBrowser('chrome')
                .setChromeOptions(options)
                .build();
            });

            after(async function() {
              if (driver) await driver.quit();
            });

            it('should load the web interface', async () => {
              await driver.get('http://localhost:3000');
              const title = await driver.getTitle();
              expect(title).to.include('rainpath');
            });

            it('should have search input field', async () => {
              await driver.get('http://localhost:3000');
              const searchInput = await driver.findElement(By.css('input[type="number"]'));
              expect(searchInput).to.exist;
            });

            it('should search for case ID 1 and display results', async () => {
              await driver.get('http://localhost:3000');
              const searchInput = await driver.findElement(By.css('input[type="number"]'));
              
              await searchInput.clear();
              await searchInput.sendKeys('1');
              await searchInput.sendKeys('\n');
              
              // Wait for results
              await driver.wait(until.elementLocated(By.css('.case-list-card, .case-details')), 5000);
              
              const results = await driver.findElements(By.css('.case-list-card, .case-details'));
              expect(results.length).to.be.greaterThan(0);
            });

            it('should handle invalid input gracefully', async () => {
              await driver.get('http://localhost:3000');
              const searchInput = await driver.findElement(By.css('input[type="number"]'));
              
              // Try to enter invalid input (should be prevented by input type="number")
              await searchInput.clear();
              await searchInput.sendKeys('abc');
              
              // Check that the input is empty or contains only numbers
              const value = await searchInput.getAttribute('value');
              expect(value).to.match(/^[0-9]*$/);
            });

            it('should display case details when a case is clicked', async () => {
              await driver.get('http://localhost:3000');
              const searchInput = await driver.findElement(By.css('input[type="number"]'));
              
              await searchInput.clear();
              await searchInput.sendKeys('1');
              await searchInput.sendKeys('\n');
              
              // Wait for results and click on first one
              await driver.wait(until.elementLocated(By.css('.case-list-card')), 5000);
              const firstResult = await driver.findElement(By.css('.case-list-card'));
              await firstResult.click();
              
              // Wait for details to load
              await driver.wait(until.elementLocated(By.css('.case-details')), 5000);
              const details = await driver.findElement(By.css('.case-details'));
              expect(details).to.exist;
            });
          });
          EOF
          
          # Run the web tests
          pnpm test test/web-interface.test.js

      - name: Upload test screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots
          path: webdriver/selenium/test/screenshots/ 